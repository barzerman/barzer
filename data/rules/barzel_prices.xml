<?xml version="1.0" encoding="UTF-8"?>
<stmset xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance"
    xmlns="http://www.barzer.net/barzel/0.1">
	<stmt m="MACRO_USD"> <pat> <any><t>usd</t><t>$</t><t>bucks</t><t>greenbacks</t><t>dollars</t><t>dollar</t></any> </pat> </stmt>

	<stmt m="MACRO_USD_PFX"> <pat> <any><t>usd</t><t>$</t></any> </pat> </stmt>
	<stmt m="MACRO_EUR_PFX"> <pat> <t>EUR</t> </pat></stmt>
	<stmt m="MACRO_EUR"> <pat> <any><t>EUR</t><t>euro</t><t>euros</t></any> </pat></stmt>
	<stmt m="MACRO_GBP"> <pat> <any><t>GBP</t><t>pound</t><t>pounds</t><t>quit</t></any> </pat></stmt>
	<stmt m="MACRO_GBP_PFX"> <pat> <t>GBP</t> </pat></stmt>

    <stmt>
        <pat>
            <any>
				<list> <list v="val"><n /></list> <expand n="MACRO_USD"/> </list>
				<list> <expand n="MACRO_USD_PFX"/> <list v="val"><n /></list> </list>
            </any> 
        </pat>
        <tran>
            <func name="mkERC">
            	<func name="mkEnt"><ltrl t="string">USD</ltrl><rn v="1" /><rn v="1" /></func>
            	<func name="mkRange">
					<func name="opMult"><var name="val"/><rn v="0.9"/></func>
					<func name="opMult"><var name="val"/><rn v="1.2"/></func>
				</func>
            </func>
        </tran>
    </stmt>
    
	<!-- 10K price -->
    <stmt>
    <pat>
		<opt><t>for</t></opt>
		<any>
			<list> <list v="val"><n /></list> <t>k</t> <expand n="MACRO_USD"/> </list>
			<list> <expand n="MACRO_USD_PFX"/><list v="val"><n /></list> <t>k</t> </list>
		</any>
    </pat>
    <tran>
        <func name="mkERC">
        <mkent i="USD" c="1" s="1"/>
        <func name="mkRange">
            <func name="opMult"><var name="val" /><rn v="800" /></func>
            <func name="opMult"><var name="val" /><rn v="1200" /></func>
        </func>
        </func>        
    </tran>
    </stmt>
    <stmt>
    <pat>
		<opt><t>for</t></opt>
		<any>
			<list> <list v="val"><n /></list> <t>k</t> <expand n="MACRO_EUR"/> </list>
			<list> <expand n="MACRO_EUR_PFX"/><list v="val"><n /></list> <t>k</t> </list>
		</any>
    </pat>
    <tran>
        <func name="mkERC">
        <mkent i="EUR" c="1" s="1"/>
        <func name="mkRange">
            <func name="opMult"><var name="val" /><rn v="800" /></func>
            <func name="opMult"><var name="val" /><rn v="1200" /></func>
        </func>
        </func>        
    </tran>
    </stmt>
    <stmt>
    <pat>
		<opt><t>for</t></opt>
		<any>
			<list> <list v="val"><n /></list> <t>k</t> <expand n="MACRO_GBP"/> </list>
			<list> <expand n="MACRO_GBP_PFX"/><list v="val"><n /></list> <t>k</t> </list>
		</any>
    </pat>
    <tran>
        <func name="mkERC">
        <mkent i="GBP" c="1" s="1"/>
        <func name="mkRange">
            <func name="opMult"><var name="val" /><rn v="800" /></func>
            <func name="opMult"><var name="val" /><rn v="1200" /></func>
        </func>
        </func>        
    </tran>
    </stmt>
	<!-- n grand price -->
    <stmt>
    <pat>
		<opt><t>for</t></opt>
        <list v="val"><n /></list>
        <t>k</t>
    </pat>
    <tran>
        <func name="mkERC">
        <mkent c="1" s="1"/>
        <func name="mkRange">
            <func name="opMult"><var name="val" /><rn v="800" /></func>
            <func name="opMult"><var name="val" /><rn v="1200" /></func>
        </func>
        </func>        
    </tran>
    </stmt>
    <stmt>
    <pat>
		<opt><t>for</t></opt>
        <list v="val"><n /></list>
        <t>grand</t>
    </pat>
    <tran>
        <func name="mkERC">
        <mkent i="USD" c="1" s="1"/>
        <func name="mkRange">
            <func name="opMult"><var name="val" /><rn v="800" /></func>
            <func name="opMult"><var name="val" /><rn v="1200" /></func>
        </func>
        </func>        
    </tran>
    </stmt>
	<!-- EURO price -->
    <stmt>
        <pat>
			<any>
			<list> <list v="val"><n /></list> <expand n="MACRO_EUR"/> </list>
			<list> <expand n="MACRO_EUR_PFX"/> <list v="val"><n /></list> </list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
            <mkent i="EUR" c="1" s="1" />
            <func name="mkRange">
				<func name="opMult"> <var name="val" /> <rn v="0.8"/> </func>
				<func name="opMult"> <var name="val" /> <rn v="1.3"/> </func>
			</func>
            </func>
        </tran>
    </stmt>
	<!-- GBP price -->
    <stmt>
        <pat>
			<any>
			<list> <list v="val"><n /></list> <expand n="MACRO_GBP"/> </list>
			<list> <expand n="MACRO_GBP_PFX"/> <list v="val"><n /></list> </list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
            <mkent i="GBP" c="1" s="1" />
            <func name="mkRange">
				<func name="opMult"> <var name="val" /> <rn v="0.8"/> </func>
				<func name="opMult"> <var name="val" /> <rn v="1.3"/> </func>
			</func>
            </func>
        </tran>
    </stmt>

	<!-- OLD ranges -->
	<!-- price ranges  -->
	<stmt>
	    <pat>
			<any>
			<list>
	        	<t>between</t>
	        	<list v="curr1"><erc s="1" c="1" /></list>
	        	<t>and</t>
	        	<list v="curr2"><erc s="1" c="1"/></list>
			</list>
			<list>
	        	<list v="curr1"><erc s="1" c="1" /></list>
	        	<any><t>to</t><t>-</t></any>
	        	<list v="curr2"><erc s="1" c="1"/></list>
			</list>
			</any>
	    </pat>
	    <tran>
	        <func name="mkERC"><var name="curr1" /><var name="curr2" /></func>
	    </tran>
	</stmt>    
    <stmt>
        <pat>
			<any>
			<list>
            	<t>between</t>
            	<list v="low"><n /></list>
            	<t>and</t>
            	<list v="high"><erc c="1" s="1" /></list>
			</list>
			<list>
				<opt><t>for</t></opt>
            	<list v="low"><n /></list>
	        	<any><t>to</t><t>-</t></any>
            	<list v="high"><erc c="1" s="1" /></list>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                <var name="high" />
                <func name="mkERC">
                	<func name="mkEnt" c="1" s="1"/>
                    <func name="mkRange"><var name="low" /></func>
                </func>
            </func>
        </tran>
    </stmt>
    
	<!-- end of OLD ranges -->
	<!-- AROUND range logic -->
    <stmt>
        <pat>
			<t>for</t>
			<any>
				<list>
					<list v="num"><n/></list>
					<expand n="MACRO_USD"/> 
				</list>
				<list>
					<expand n="MACRO_USD_PFX"/> 
					<list v="num"><n/></list>
				</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                <func name="mkEnt"><ltrl t="string">USD</ltrl><rn v="1" /><rn v="1" /></func>
				<func name="mkRange">
					<func name="opMult"><var name="num"/><rn v="0.9"/></func>
					<func name="opMult"><var name="num"/><rn v="1.2"/></func>
				</func>
			</func>
        </tran>
    </stmt>
    <stmt>
        <pat>
			<opt><t>for</t></opt>
			<any><list><t>close</t><t>to</t></list><t>around</t><t>about</t><t>roughly</t></any>
			<any>
				<list>
					<list v="num"><n/></list>
					<expand n="MACRO_USD"/> 
				</list>
				<list>
					<any><t>$</t><t>USD</t></any>
					<list v="num"><n/></list>
				</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                <func name="mkEnt"><rn v="1" /><rn v="1" /></func>
				<func name="mkRange">
					<func name="opMult"><var name="num"/><rn v="0.6"/></func>
					<func name="opMult"><var name="num"/><rn v="1.5"/></func>
				</func>
			</func>
        </tran>
    </stmt>
	<!-- new BETWEEN range logic -->
	<!-- USD BETWEEN-->
    <stmt>
        <pat>
			<any>
				<any>
					<list>
            			<t>between</t> 
						<any><t>$</t><t>USD</t></any>
						<list v="low"><n/></list> 
						<t>and</t> 
						<opt><any><t>$</t><t>USD</t></any></opt>
						<list v="high"><n/></list>
					</list>
					<list>
            			<opt><t>from</t> </opt>
						<any><t>$</t><t>USD</t></any>
						<list v="low"><n/></list> 
						<t>to</t> 
						<opt><any><t>$</t><t>USD</t></any></opt>
						<list v="high"><n/></list>
					</list>
					<list>
						<opt><t>for</t></opt>
						<expand n="MACRO_USD_PFX"/>
						<list v="low"><n/></list> 
						<t>-</t> 
						<opt><expand n="MACRO_USD_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
						<opt><t>for</t></opt>
						<list v="low"><n/></list> 
						<t>-</t> 
						<list v="high"><n/></list>
						<expand n="MACRO_USD"/> 
					</list>
				</any>
				<list>
            		<t>between</t> <list v="low"><n/></list> <t>and</t> <list v="high"><n /></list>
					<list> <list v="num"><n /></list> <expand n="MACRO_USD"/> </list>
				</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                 <mkent i="USD" c="1" s="1"/>
                 <func name="mkRange"><var name="low"/><var name="high"/></func>
             </func>
        </tran>
    </stmt>    
	<!-- EUR BETWEEN-->
    <stmt>
        <pat>
			<any>
				<any>
					<list>
            			<t>between</t> 
						<expand n="MACRO_EUR_PFX"/>
						<list v="low"><n/></list> 
						<t>and</t> 
						<opt><expand n="MACRO_EUR_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
            			<opt><t>from</t> </opt>
						<expand n="MACRO_EUR_PFX"/>
						<list v="low"><n/></list> 
						<t>to</t> 
						<opt><expand n="MACRO_EUR_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
						<opt><t>for</t></opt>
						<expand n="MACRO_EUR_PFX"/>
						<list v="low"><n/></list> 
						<t>-</t> 
						<opt><expand n="MACRO_EUR_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
						<opt><t>for</t></opt>
						<list v="low"><n/></list> 
						<t>-</t> 
						<list v="high"><n/></list>
						<expand n="MACRO_EUR"/> 
					</list>
				</any>
				<list>
            		<t>between</t> <list v="low"><n/></list> <t>and</t> <list v="high"><n /></list>
					<list> <list v="num"><n /></list> <expand n="MACRO_EUR"/> </list>
				</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                 <mkent i="EUR" c="1" s="1"/>
                 <func name="mkRange"><var name="low"/><var name="high"/></func>
             </func>
        </tran>
    </stmt>    
	<!-- GBP between -->
    <stmt>
        <pat>
			<any>
				<any>
					<list>
            			<t>between</t> 
						<expand n="MACRO_GBP_PFX"/>
						<list v="low"><n/></list> 
						<t>and</t> 
						<opt><expand n="MACRO_GBP_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
            			<opt><t>from</t> </opt>
						<expand n="MACRO_GBP_PFX"/>
						<list v="low"><n/></list> 
						<t>to</t> 
						<opt><expand n="MACRO_GBP_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
						<opt><t>for</t></opt>
						<expand n="MACRO_GBP_PFX"/>
						<list v="low"><n/></list> 
						<t>-</t> 
						<opt><expand n="MACRO_GBP_PFX"/></opt>
						<list v="high"><n/></list>
					</list>
					<list>
						<opt><t>for</t></opt>
						<list v="low"><n/></list> 
						<t>-</t> 
						<list v="high"><n/></list>
						<expand n="MACRO_GBP"/> 
					</list>
				</any>
				<list>
            		<t>between</t> <list v="low"><n/></list> <t>and</t> <list v="high"><n /></list>
					<list> <list v="num"><n /></list> <expand n="MACRO_GBP"/> </list>
				</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                 <mkent i="GBP" c="1" s="1"/>
                 <func name="mkRange"><var name="low"/><var name="high"/></func>
             </func>
        </tran>
    </stmt>    
	<!-- end of price ranges -->
    
    <stmt>
        <pat>
            <any v="range">
                <range t="i" />
                <erc c="1" s="1" />
            </any>
            <any><t>bucks</t><t>dollars</t><t>dollar</t></any>
        </pat>
        <tran>
            <func name="mkERC">
                <mkent i="USD" c="1" s="1" />
                <var name="range" />
            </func>
        </tran>
    </stmt>
    <stmt>
        <pat>
            <any v="range">
                <range t="i" />
                <erc c="1" s="1" />
            </any>
            <any><t>euro</t><t>euros</t><t>eur</t></any>
        </pat>
        <tran>
            <func name="mkERC">
                <mkent i="EUR" c="1" s="1" />
                <var name="range" />
            </func>
        </tran>
    </stmt>
    <stmt>
        <pat>
			<opt><t>the</t></opt>
			<any>
			<list><t>least</t><t>expensive</t></list>
				<list><t>lowest</t> <t>priced</t></list>
				<list><t>lowest</t> <t>price</t></list>
            <t>cheapest</t>
			</any>
        </pat>
    <tran>
        <func name="mkERC">
            <func name="mkEnt"><rn v="1" /><rn v="1" /></func> 
            <func name="mkRange"></func>
        </func>
    </tran>
    </stmt>
    <stmt>
        <pat>
			<opt><t>the</t></opt>
			<any>
				<list><t>most</t> <t>expensive</t></list>
				<list><t>highest</t> <t>priced</t></list>
				<list><t>highest</t> <t>price</t></list>
				<t>priciest</t>
				<t>costliest</t>
			</any>
        </pat>
    <tran>
        <func name="mkERC">
            <func name="mkEnt"><rn v="1" /><rn v="1" /></func> 
            <func name="mkRange"><ltrl>DESC</ltrl></func>
        </func>
    </tran>
    </stmt>

	<!-- price over -->
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>less</t><t>than</t></list>
                	<list><t>at</t><t>least</t></list>
                	<list><t>higher</t><t>than</t></list>
                	<t>over</t>
                	<t>above</t>
                	<list><t>starting</t><any><t>at</t><t>from</t></any></list>
            	</any>
				<any><t>$</t><t>USD</t></any>
            	<list v="num"><n /></list>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /></list> <expand n="MACRO_USD"/> </list>
					<list> <any><t>$</t><t>USD</t></any> <list v="num"><n /></list> </list>
				</any>
				<any><t>min</t><t>minimum</t><list><t>at</t><t>least</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>no</t><t>less</t><t>than</t></list>
                	<list><t>at</t><t>least</t></list>
                	<list><t>higher</t><t>than</t></list>
                	<t>over</t>
                	<t>above</t>
                	<list><t>starting</t><any><t>at</t><t>from</t></any></list>
            	</any>
            	<list v="num"><n /></list>
			   	<expand n="MACRO_USD"/>
			</list>
			<list>
				<any>
			   	<list><t>more</t><t>expensive</t><t>than</t></list>
			   	<list><t>priced</t><t>above</t></list>
				</any>
				<opt><any><t>$</t><t>USD</t></any></opt>
            	<list v="num"><n /></list>
				<opt> <expand n="MACRO_USD"/> </opt>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
                <func name="mkEnt"><rn v="1" /><rn v="1" /></func>
                <func name="mkRange">
                    <var name="num" />
                    <rn v="2147483647" /> <!-- this is a hack, need to change -->
                </func>
            </func>
        </tran>
    </stmt>
	<!-- price under -->
	<!-- USD under -->
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>more</t><t>than</t></list>
                	<list><t>at</t><t>most</t></list>
                	<list><t>less</t><t>than</t></list>
                	<list><t>lower</t><t>than</t></list>
                	<list><t>cheaper</t><opt><t>than</t></opt></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
				<expand n="MACRO_USD_PFX"/>
            	<list v="num"><n /></list>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /></list> <expand n="MACRO_USD"/> </list>
					<list> <expand n="MACRO_USD_PFX"/><list v="num"><n /></list> </list>
				</any>
				<any><t>max</t><t>maximum</t><t>tops</t><list><t>at</t><t>most</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>lower</t><t>than</t></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
            	<list v="num"><n /></list>
			   	<expand n="MACRO_USD"/>
			</list>
			<list>
				<any>
			   	<list><t>less</t><t>expensive</t><t>than</t></list>
               	<list><t>cheaper</t><opt><t>than</t></opt></list>
				</any>
            	<list v="num"><n /></list>
				<opt> <expand n="MACRO_USD"/> </opt>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
               <mkent i="USD" c="1" s="1"/>
               <func name="mkRange"><rn v="0" /><var name="num" /></func>
            </func>
        </tran>
    </stmt>
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>more</t><t>than</t></list>
                	<list><t>at</t><t>most</t></list>
                	<list><t>less</t><t>than</t></list>
                	<list><t>lower</t><t>than</t></list>
                	<list><t>cheaper</t><opt><t>than</t></opt></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
				<expand n="MACRO_EUR_PFX"/>
            	<list v="num"><n /></list>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /></list> <expand n="MACRO_EUR"/> </list>
					<list> <expand n="MACRO_EUR_PFX"/><list v="num"><n /></list> </list>
				</any>
				<any><t>max</t><t>maximum</t><t>tops</t><list><t>at</t><t>most</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>lower</t><t>than</t></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
            	<list v="num"><n /></list>
			   	<expand n="MACRO_EUR"/>
			</list>
			<list>
				<any>
			   	<list><t>less</t><t>expensive</t><t>than</t></list>
               	<list><t>cheaper</t><opt><t>than</t></opt></list>
				</any>
            	<list v="num"><n /></list>
				<expand n="MACRO_EUR"/>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
               <mkent i="EUR" c="1" s="1"/>
               <func name="mkRange"><rn v="0" /><var name="num" /></func>
            </func>
        </tran>
    </stmt>
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>more</t><t>than</t></list>
                	<list><t>at</t><t>most</t></list>
                	<list><t>less</t><t>than</t></list>
                	<list><t>lower</t><t>than</t></list>
                	<list><t>cheaper</t><opt><t>than</t></opt></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
				<expand n="MACRO_GBP_PFX"/>
            	<list v="num"><n /></list>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /></list> <expand n="MACRO_GBP"/> </list>
					<list> <expand n="MACRO_GBP_PFX"/><list v="num"><n /></list> </list>
				</any>
				<any><t>max</t><t>maximum</t><t>tops</t><list><t>at</t><t>most</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>lower</t><t>than</t></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
            	<list v="num"><n /></list>
			   	<expand n="MACRO_GBP"/>
			</list>
			<list>
				<any>
			   	<list><t>less</t><t>expensive</t><t>than</t></list>
               	<list><t>cheaper</t><opt><t>than</t></opt></list>
				</any>
            	<list v="num"><n /></list>
				<expand n="MACRO_GBP"/>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
               <mkent i="GBP" c="1" s="1"/>
               <func name="mkRange"><rn v="0" /><var name="num" /></func>
            </func>
        </tran>
    </stmt>
	<!-- under nK -->
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>more</t><t>than</t></list>
                	<list><t>at</t><t>most</t></list>
                	<list><t>less</t><t>than</t></list>
                	<list><t>lower</t><t>than</t></list>
                	<list><t>cheaper</t><opt><t>than</t></opt></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
				<opt><expand n="MACRO_USD_PFX"/></opt>
            	<list v="num"><n /></list>
				<t>k</t>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /></list> <t>k</t> <expand n="MACRO_USD"/> </list>
					<list> <expand n="MACRO_USD_PFX"/><list v="num"><n /><t>k</t></list> </list>
				</any>
				<any><t>max</t><t>maximum</t><t>tops</t><list><t>at</t><t>most</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>lower</t><t>than</t></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
            	<list v="num"><n /></list>
				<t>k</t>
			   	<expand n="MACRO_USD"/>
			</list>
			<list>
				<any>
			   	<list><t>less</t><t>expensive</t><t>than</t></list>
               	<list><t>cheaper</t><opt><t>than</t></opt></list>
				</any>
            	<list v="num"><n /></list>
				<t>k</t>
				<opt> <expand n="MACRO_USD"/> </opt>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
               <mkent i="USD" c="1" s="1"/>
               <func name="mkRange">
			   		<rn v="0" />
			   		<func name="opMult"> <var name="num" /><rn v="1000"/></func>
			   </func>
            </func>
        </tran>
    </stmt>
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>more</t><t>than</t></list>
                	<list><t>at</t><t>most</t></list>
                	<list><t>less</t><t>than</t></list>
                	<list><t>lower</t><t>than</t></list>
                	<list><t>cheaper</t><opt><t>than</t></opt></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
				<expand n="MACRO_EUR_PFX"/>
            	<list v="num"><n /></list>
				<t>k</t>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /></list><t>k</t> <expand n="MACRO_EUR"/> </list>
					<list> <expand n="MACRO_EUR_PFX"/><list v="num"><n /><t>k</t></list> </list>
				</any>
				<any><t>max</t><t>maximum</t><t>tops</t><list><t>at</t><t>most</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>lower</t><t>than</t></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
            	<list v="num"><n /></list>
				<t>k</t>
			   	<expand n="MACRO_EUR"/>
			</list>
			<list>
				<any>
			   	<list><t>less</t><t>expensive</t><t>than</t></list>
               	<list><t>cheaper</t><opt><t>than</t></opt></list>
				</any>
            	<list v="num"><n /></list>
				<t>k</t>
				<expand n="MACRO_EUR"/>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
               <mkent i="EUR" c="1" s="1"/>
               <func name="mkRange">
			   		<rn v="0" />
					<func name="opMult">
						<var name="num" />
						<rn v="1000"/>
					</func>
				</func>
            </func>
        </tran>
    </stmt>
    <stmt>
        <pat>
			<any>
			<list>
            	<any>
                	<list><t>no</t><t>more</t><t>than</t></list>
                	<list><t>at</t><t>most</t></list>
                	<list><t>less</t><t>than</t></list>
                	<list><t>lower</t><t>than</t></list>
                	<list><t>cheaper</t><opt><t>than</t></opt></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
				<expand n="MACRO_GBP_PFX"/>
            	<list v="num"><n /></list>
				<t>k</t>
			</list>
			<list>
				<opt><t>for</t></opt>
				<any>
					<list> <list v="num"><n /><t>k</t></list> <expand n="MACRO_GBP"/> </list>
					<list> <expand n="MACRO_GBP_PFX"/><list v="num"><n/><t>k</t></list> </list>
				</any>
				<any><t>max</t><t>maximum</t><t>tops</t><list><t>at</t><t>most</t></list></any>
			</list>
			<list>
            	<any>
                	<list><t>lower</t><t>than</t></list>
                	<t>under</t>
                	<t>below</t>
            	</any>
            	<list v="num"><n /></list>
				<t>k</t>
			   	<expand n="MACRO_GBP"/>
			</list>
			<list>
				<any>
			   	<list><t>less</t><t>expensive</t><t>than</t></list>
               	<list><t>cheaper</t><opt><t>than</t></opt></list>
				</any>
            	<list v="num"><n /></list>
				<t>k</t>
				<expand n="MACRO_GBP"/>
			</list>
			</any>
        </pat>
        <tran>
            <func name="mkERC">
               <mkent i="GBP" c="1" s="1"/>
               <func name="mkRange">
			   		<rn v="0" />
					<func name="opMult">
						<var name="num" />
						<rn v="1000" />
					</func>
				</func>
            </func>
        </tran>
    </stmt>
	<!-- end of price under -->
</stmset>
