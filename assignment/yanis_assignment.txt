Main development
The goal is to 
* create such design that multiple tries are used for matching in the following 
order
* be able to perform token search 
* ability to aggregate ERCs - either change ERC structure or start using Expressions 

1. custom trie pre-basic - in case there's stuf that may clash with the basic patterns. for example entity something like a brand named "cheapest french wine" 
2. basic trie  (dates/times)
3. custom post basic trie 

Deliverables necessary for this:
1. implementing compounded words
	- trie load comp words implement - comp word number autogeneration
		- enumeration of compounded words should be separate for each trie 
	- modify xmload to create compounded words for names in addition to separate tokens 
2. implementing multi-trie container inside the universe 
	* getTrie will return the "current instance" and universe will have a way to iterate over
	all possible instances of trie
3. handle words that are actually numbers. 
	*Whenever a token is interned an entry needs to be made linking the StoredToken to a number 
	*literal bead needs to have a flag indicating that this literal is in fact a number (integer)
	*doFirmMatch for number patterns against literal needs to check the flag and in case this is 	
	the number, get the number 
4. add attribute "trie id" to stmtset top level tag in trie 
5. implement entity tag search 
	- add tags to translation 
	- write function for the matching (input - barzelbead list, output - entity list)
6. Create new atomic type - expressions for logical combiantions of ERCs  

Miscellaneous other things

*. basic semantical routines - 
	- repeated stop tokens (consecutive same tok id) need to be absorbed into the first one
*. document barzel trie matching algo 
	- wc lookups are very costly and vast majority of these nodes are identical 
		1. perhaps instead of wcLookup this should simply be a variant including among other things 
			BarzelTrieNode (bypassing the whole map/keys nonsense) for cases when there's only 
			one wc node - this is 
			a reasonable assumption - most date patterns would have one wc child per number node (!)


