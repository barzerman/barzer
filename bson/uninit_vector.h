/**********************************************************************
 * eBSON11 â€” BSON encoder in C++11.
 *
 * Copyright (C) 2013  Georg Rudoy		<georg@barzer.net>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <vector>
#include <cstring>

namespace ebson11
{
namespace detail
{
	/** @brief A service class to be used in place of std::vector for performance reasons.
	 *
	 * It doesn't initialize vector values (especially on resize()), thus cutting Encoder
	 * run time roughly in two. It also uses memcpy for copying.
	 *
	 * @note This vector should be only used with POD types.
	 *
	 * @param Alloc Isn't used internally, it is present to keep type signature compatible
	 * with std::vector.
	 */
	template<typename T, typename Alloc = std::allocator<T>>
	class uninit_vector
	{
		T *m_data = nullptr;
		size_t m_capacity = 0;
		size_t m_size = 0;
	public:
		typedef uint8_t value_type;

		uninit_vector() {}
		~uninit_vector() { delete [] m_data; }

		uninit_vector(const uninit_vector<T>& other)
		{
			reserve(other.m_size);
			m_size = other.m_size;
			memcpy(m_data, other.m_data, other.m_size * sizeof(T));
		}

		uninit_vector(uninit_vector<T>&& other) { swap(other); }

		uninit_vector& operator=(const uninit_vector<T>& other)
		{
			reserve(other.m_size);
			memcpy(m_data, other.m_data, other.m_size * sizeof(T));
		}

		uninit_vector& operator=(uninit_vector<T>&& other) { swap(other); }

		const T* begin() const { return m_data; }
		const T* end() const { return m_data + m_size; }

		void swap(uninit_vector& other)
		{
			std::swap(other.m_data, m_data);
			std::swap(other.m_capacity, m_capacity);
			std::swap(other.m_size, m_size);
		}

		void reserve(size_t capacity)
		{
			if (capacity <= m_capacity)
				return;

			uninit_vector<T> other;
			other.m_data = new T[capacity];
			other.m_capacity = capacity;
			other.m_size = m_size;

			if (m_data)
				memcpy(other.m_data, m_data, sizeof(T) * m_size);

			swap(other);
		}

		void resize(size_t size)
		{
			reserve(size);
			m_size = size;
		}

		void push_back(const T& t)
		{
			if (m_size == m_capacity)
				reserve(m_capacity * 2);

			m_data[m_size++] = t;
		}

		const T& operator[](size_t p) const { return m_data[p]; }

		T& operator[](size_t p) { return m_data[p]; }

		size_t size() const { return m_size; }

		std::vector<T> to_std_vector() const
		{
			std::vector<T> result;
			result.resize(size());
			memcpy(&result[0], m_data, sizeof(T) * size());
			return result;
		}

		bool operator==(const uninit_vector<T>& other) const
		{
			return m_size == other.m_size &&
					!memcmp(m_data, other.m_data, m_size * sizeof(T));
		}

		bool operator==(const std::vector<T>& other) const
		{
			return m_size == other.size() &&
					!memcmp(m_data, &other[0], m_size * sizeof(T));
		}

		template<typename U>
		bool operator!=(const U& other) const
		{
			return !(*this == other);
		}

		bool operator<(const uninit_vector<T>& other) const
		{
			if (m_size != other.size())
				return m_size < other.size();

			return memcmp(m_data, other.m_data) < 0;
		}

		bool operator<(const std::vector<T>& other) const
		{
			if (m_size != other.size())
				return m_size < other.size();

			return memcmp(m_data, &other[0]) < 0;
		}
	};
}
}
